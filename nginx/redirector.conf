# Force HTTP to HTTPS, allow Certbot HTTP challenge
server {
    listen 80;
    server_name your-domain.com;

    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name your-domain.com;

    root /var/www/redirector;
    index index.php;

    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Optional security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Certbot challenge handler for renewals
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # If root path (no short code), redirect to frontend securely
    location = / {
        return 301 https://link-shortener.your-domain.com;
    }

    # All other paths treated as short_code
    location / {
        try_files $uri $uri/ /index.php?$args&short_code=$uri;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass redirector:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME /var/www/redirector$fastcgi_script_name;
    }
}
