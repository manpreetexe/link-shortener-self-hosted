# Force HTTP to HTTPS, allow Certbot challenges
server {
    listen 80;
    server_name link-shortener.your-domain.com www.your-domain.com;

    # Allow Certbot HTTP challenge
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name link-shortener.your-domain.com www.your-domain.com;

    root /var/www/frontend;
    index index.php;

    ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Optional security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Certbot renewal handler (optional but safe)
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # Handle extensionless PHP files
    location / {
        # Try the exact file first
        try_files $uri $uri/ @extensionless;
    }

    # Handle extensionless PHP requests
    location @extensionless {
        # Check if the PHP file exists with .php extension
        if (-f $document_root$uri.php) {
            rewrite ^(.*)$ $1.php last;
        }
        # If no .php file found, return 404
        return 404;
    }

    # Process PHP files
    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass frontend:9000;
        fastcgi_param SCRIPT_FILENAME /var/www/frontend$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    # Deny access to .htaccess files
    location ~ /\.ht {
        deny all;
    }

    # Optional: Handle static files efficiently
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}